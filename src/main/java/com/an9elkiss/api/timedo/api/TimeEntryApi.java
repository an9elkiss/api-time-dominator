/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.an9elkiss.api.timedo.api;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.threeten.bp.OffsetDateTime;

import com.an9elkiss.api.timedo.command.TimeEntryCmd;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-28T09:59:07.066Z")

@Api(value = "time-entry", description = "the time-entry API")
public interface TimeEntryApi {

    @ApiOperation(value = "Add a new time entry record to record what you have done", nickname = "addTimeEntry", notes = "", tags={ "time-entry", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/time-entry",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addTimeEntry(@ApiParam(value = "Date of the time entry", required=true) @RequestPart(value="date", required=true)  OffsetDateTime date,@ApiParam(value = "Type of time entry", required=true) @RequestPart(value="type", required=true)  String type,@ApiParam(value = "Duration of time entry", required=true) @RequestPart(value="duration", required=true)  Long duration,@ApiParam(value = "Comment of time entry") @RequestPart(value="comment", required=false)  String comment);


    @ApiOperation(value = "Deletes a time entry", nickname = "deleteTimeEntry", notes = "", tags={ "time-entry", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied") })
    @RequestMapping(value = "/time-entry/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTimeEntry(@ApiParam(value = "Time entry id to delete",required=true) @PathVariable("id") Long id);


	@ApiOperation(value = "Finds time entry by id", nickname = "findTimeEntryById", notes = "Finds time entry by id", response = TimeEntryCmd.class, tags = {
			"time-entry", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TimeEntryCmd.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied") })
    @RequestMapping(value = "/time-entry/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
	ResponseEntity<TimeEntryCmd> findTimeEntryById(
			@ApiParam(value = "ID of time entry that needs to be fetched", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update an existing time entry", nickname = "updateTimeEntry", notes = "", tags={ "time-entry", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/time-entry/{id}",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateTimeEntry(@ApiParam(value = "ID of time entry that needs to be updated",required=true) @PathVariable("id") Long id,@ApiParam(value = "Updated date of the time entry", required=true) @RequestPart(value="date", required=true)  OffsetDateTime date,@ApiParam(value = "Updated type of time entry", required=true) @RequestPart(value="type", required=true)  String type,@ApiParam(value = "Updated duration of time entry", required=true) @RequestPart(value="duration", required=true)  Long duration,@ApiParam(value = "Updated comment of time entry") @RequestPart(value="comment", required=false)  String comment);

}
